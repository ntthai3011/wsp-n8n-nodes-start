"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cred_class_field_unobscured_sensitive_input_exports = {};
__export(cred_class_field_unobscured_sensitive_input_exports, {
  default: () => cred_class_field_unobscured_sensitive_input_default
});
module.exports = __toCommonJS(cred_class_field_unobscured_sensitive_input_exports);
var import_utils = require("../ast/utils");
var import_getters = require("../ast/getters");
const SENSITIVE_INPUT_NAMES = ["password", "accessToken", "apiKey"];
var cred_class_field_unobscured_sensitive_input_default = import_utils.utils.createRule({
  name: import_utils.utils.getRuleName(module),
  meta: {
    type: "problem",
    docs: {
      description: "`typeOptions.password` must be set to `true` in a sensitive node parameter, to obscure the input.",
      recommended: "error"
    },
    fixable: "code",
    schema: [],
    messages: {
      addTypeOptionsPassword: "Add `typeOptions.password` [autofixable]"
    }
  },
  defaultOptions: [],
  create(context) {
    return {
      ObjectExpression(node) {
        const name = import_getters.getters.nodeParam.getName(node);
        if (!name || !SENSITIVE_INPUT_NAMES.includes(name.value))
          return;
        const typeOptions = import_getters.getters.nodeParam.getTypeOptions(node);
        if ((typeOptions == null ? void 0 : typeOptions.value.password) === true)
          return;
        const type = import_getters.getters.nodeParam.getType(node);
        if (!type)
          return;
        const { indentation, range } = import_utils.utils.getInsertionArgs(type);
        context.report({
          messageId: "addTypeOptionsPassword",
          node: type.ast,
          fix: (fixer) => fixer.insertTextAfterRange(
            range,
            `
${indentation}typeOptions: { password: true },`
          )
        });
      }
    };
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

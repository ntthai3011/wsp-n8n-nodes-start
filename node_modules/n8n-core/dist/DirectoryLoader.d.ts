import { KnownNodesAndCredentials } from 'n8n-workflow';
import type { ICredentialType, ICredentialTypeData, INodeTypeBaseDescription, INodeTypeData, INodeTypeNameVersion } from 'n8n-workflow';
import type { n8n } from './Interfaces';
export declare type Types = {
    nodes: INodeTypeBaseDescription[];
    credentials: ICredentialType[];
};
export declare abstract class DirectoryLoader {
    protected readonly directory: string;
    protected readonly excludeNodes: string[];
    protected readonly includeNodes: string[];
    readonly loadedNodes: INodeTypeNameVersion[];
    readonly nodeTypes: INodeTypeData;
    readonly credentialTypes: ICredentialTypeData;
    readonly known: KnownNodesAndCredentials;
    readonly types: Types;
    constructor(directory: string, excludeNodes?: string[], includeNodes?: string[]);
    abstract loadAll(): Promise<void>;
    protected resolvePath(file: string): string;
    protected loadNodeFromFile(packageName: string, nodeName: string, filePath: string): void;
    protected loadCredentialFromFile(credentialName: string, filePath: string): void;
    private getCodex;
    private addCodex;
    private fixIconPath;
}
export declare class CustomDirectoryLoader extends DirectoryLoader {
    loadAll(): Promise<void>;
}
export declare class PackageDirectoryLoader extends DirectoryLoader {
    packageName: string;
    packageJson: n8n.PackageJson;
    readPackageJson(): Promise<void>;
    loadAll(): Promise<void>;
    protected readJSON<T>(file: string): Promise<T>;
}
export declare class LazyPackageDirectoryLoader extends PackageDirectoryLoader {
    loadAll(): Promise<void>;
}

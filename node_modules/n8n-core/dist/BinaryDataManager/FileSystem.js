"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryDataFileSystem = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const n8n_workflow_1 = require("n8n-workflow");
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const PREFIX_METAFILE = 'binarymeta';
const PREFIX_PERSISTED_METAFILE = 'persistedmeta';
class BinaryDataFileSystem {
    constructor(config) {
        this.storagePath = config.localStoragePath;
        this.binaryDataTTL = config.binaryDataTTL;
        this.persistedBinaryDataTTL = config.persistedBinaryDataTTL;
    }
    async init(startPurger = false) {
        if (startPurger) {
            setInterval(async () => {
                await this.deleteMarkedFiles();
            }, this.binaryDataTTL * 30000);
            setInterval(async () => {
                await this.deleteMarkedPersistedFiles();
            }, this.persistedBinaryDataTTL * 30000);
        }
        return promises_1.default
            .readdir(this.storagePath)
            .catch(async () => promises_1.default.mkdir(this.storagePath, { recursive: true }))
            .then(async () => promises_1.default.readdir(this.getBinaryDataMetaPath()))
            .catch(async () => promises_1.default.mkdir(this.getBinaryDataMetaPath(), { recursive: true }))
            .then(async () => promises_1.default.readdir(this.getBinaryDataPersistMetaPath()))
            .catch(async () => promises_1.default.mkdir(this.getBinaryDataPersistMetaPath(), { recursive: true }))
            .then(async () => this.deleteMarkedFiles())
            .then(async () => this.deleteMarkedPersistedFiles())
            .then(() => { });
    }
    async getFileSize(identifier) {
        const stats = await promises_1.default.stat(this.getBinaryPath(identifier));
        return stats.size;
    }
    async copyBinaryFile(filePath, executionId) {
        const binaryDataId = this.generateFileName(executionId);
        await this.addBinaryIdToPersistMeta(executionId, binaryDataId);
        await this.copyFileToLocalStorage(filePath, binaryDataId);
        return binaryDataId;
    }
    async storeBinaryMetadata(identifier, metadata) {
        await promises_1.default.writeFile(this.getMetadataPath(identifier), JSON.stringify(metadata), {
            encoding: 'utf-8',
        });
    }
    async getBinaryMetadata(identifier) {
        return (0, n8n_workflow_1.jsonParse)(await promises_1.default.readFile(this.getMetadataPath(identifier), { encoding: 'utf-8' }));
    }
    async storeBinaryData(binaryBuffer, executionId) {
        const binaryDataId = this.generateFileName(executionId);
        await this.addBinaryIdToPersistMeta(executionId, binaryDataId);
        await this.saveToLocalStorage(binaryBuffer, binaryDataId);
        return binaryDataId;
    }
    async retrieveBinaryDataByIdentifier(identifier) {
        return this.retrieveFromLocalStorage(identifier);
    }
    getBinaryPath(identifier) {
        return path_1.default.join(this.storagePath, identifier);
    }
    getMetadataPath(identifier) {
        return path_1.default.join(this.storagePath, `${identifier}.metadata`);
    }
    async markDataForDeletionByExecutionId(executionId) {
        const tt = new Date(new Date().getTime() + this.binaryDataTTL * 60000);
        return promises_1.default.writeFile(path_1.default.join(this.getBinaryDataMetaPath(), `${PREFIX_METAFILE}_${executionId}_${tt.valueOf()}`), '');
    }
    async deleteMarkedFiles() {
        return this.deleteMarkedFilesByMeta(this.getBinaryDataMetaPath(), PREFIX_METAFILE);
    }
    async deleteMarkedPersistedFiles() {
        return this.deleteMarkedFilesByMeta(this.getBinaryDataPersistMetaPath(), PREFIX_PERSISTED_METAFILE);
    }
    async addBinaryIdToPersistMeta(executionId, identifier) {
        const currentTime = new Date().getTime();
        const timeAtNextHour = currentTime + 3600000 - (currentTime % 3600000);
        const timeoutTime = timeAtNextHour + this.persistedBinaryDataTTL * 60000;
        const filePath = path_1.default.join(this.getBinaryDataPersistMetaPath(), `${PREFIX_PERSISTED_METAFILE}_${executionId}_${timeoutTime}`);
        return promises_1.default
            .readFile(filePath)
            .catch(async () => promises_1.default.writeFile(filePath, identifier))
            .then(() => { });
    }
    async deleteMarkedFilesByMeta(metaPath, filePrefix) {
        const currentTimeValue = new Date().valueOf();
        const metaFileNames = await promises_1.default.readdir(metaPath);
        const execsAdded = {};
        const proms = metaFileNames.reduce((prev, curr) => {
            const [prefix, executionId, ts] = curr.split('_');
            if (prefix !== filePrefix) {
                return prev;
            }
            const execTimestamp = parseInt(ts, 10);
            if (execTimestamp < currentTimeValue) {
                if (execsAdded[executionId]) {
                    prev.push(this.deleteMetaFileByPath(path_1.default.join(metaPath, curr)));
                    return prev;
                }
                execsAdded[executionId] = 1;
                prev.push(this.deleteBinaryDataByExecutionId(executionId).then(async () => this.deleteMetaFileByPath(path_1.default.join(metaPath, curr))));
            }
            return prev;
        }, [Promise.resolve()]);
        return Promise.all(proms).then(() => { });
    }
    async duplicateBinaryDataByIdentifier(binaryDataId, prefix) {
        const newBinaryDataId = this.generateFileName(prefix);
        return promises_1.default
            .copyFile(path_1.default.join(this.storagePath, binaryDataId), path_1.default.join(this.storagePath, newBinaryDataId))
            .then(() => newBinaryDataId);
    }
    async deleteBinaryDataByExecutionId(executionId) {
        const regex = new RegExp(`${executionId}_*`);
        const filenames = await promises_1.default.readdir(path_1.default.join(this.storagePath));
        const proms = filenames.reduce((allProms, filename) => {
            if (regex.test(filename)) {
                allProms.push(promises_1.default.rm(path_1.default.join(this.storagePath, filename)));
            }
            return allProms;
        }, [Promise.resolve()]);
        return Promise.all(proms).then(async () => Promise.resolve());
    }
    async deleteBinaryDataByIdentifier(identifier) {
        return this.deleteFromLocalStorage(identifier);
    }
    async persistBinaryDataForExecutionId(executionId) {
        return promises_1.default.readdir(this.getBinaryDataPersistMetaPath()).then(async (metafiles) => {
            const proms = metafiles.reduce((prev, curr) => {
                if (curr.startsWith(`${PREFIX_PERSISTED_METAFILE}_${executionId}_`)) {
                    prev.push(promises_1.default.rm(path_1.default.join(this.getBinaryDataPersistMetaPath(), curr)));
                    return prev;
                }
                return prev;
            }, [Promise.resolve()]);
            return Promise.all(proms).then(() => { });
        });
    }
    generateFileName(prefix) {
        return [prefix, (0, uuid_1.v4)()].join('');
    }
    getBinaryDataMetaPath() {
        return path_1.default.join(this.storagePath, 'meta');
    }
    getBinaryDataPersistMetaPath() {
        return path_1.default.join(this.storagePath, 'persistMeta');
    }
    async deleteMetaFileByPath(metafilePath) {
        return promises_1.default.rm(metafilePath);
    }
    async deleteFromLocalStorage(identifier) {
        return promises_1.default.rm(this.getBinaryPath(identifier));
    }
    async copyFileToLocalStorage(source, identifier) {
        await promises_1.default.cp(source, this.getBinaryPath(identifier));
    }
    async saveToLocalStorage(data, identifier) {
        await promises_1.default.writeFile(this.getBinaryPath(identifier), data);
    }
    async retrieveFromLocalStorage(identifier) {
        const filePath = this.getBinaryPath(identifier);
        try {
            return await promises_1.default.readFile(filePath);
        }
        catch (e) {
            throw new Error(`Error finding file: ${filePath}`);
        }
    }
}
exports.BinaryDataFileSystem = BinaryDataFileSystem;
//# sourceMappingURL=FileSystem.js.map